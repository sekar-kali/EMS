{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shims\\\\Desktop\\\\EMS\\\\frontend\\\\src\\\\pages\\\\Auth\\\\CreatePassword.jsx\",\n  _s = $RefreshSig$();\n// CreatePassword.jsx\nimport React, { useState } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { ToastContainer, toast } from 'react-toastify';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CreatePassword = () => {\n  _s();\n  const {\n    email\n  } = useParams();\n  const [password, setPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [error, setError] = useState('');\n  const navigate = useNavigate();\n  const handleSubmit = async e => {\n    e.preventDefault();\n\n    // Validate passwords\n    if (password !== confirmPassword) {\n      setError('Passwords do not match.');\n      return;\n    }\n\n    // Add logic to send the new password to the server for confirmation\n    const response = await sendPasswordToServer(email, password);\n    if (response.status === 200) {\n      // Password created successfully, redirect to login page\n      toast.success('Password created successfully ! Redirecting to login...');\n      setTimeout(() => {\n        navigate('/auth/login');\n      }, 2000);\n    } else {\n      setError('Error creating password. Please try again.');\n    }\n  };\n  const sendPasswordToServer = async (email, password) => {\n    try {\n      const response = await fetch(`http://localhost:5000/api/create-password/${email}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          password\n        })\n      });\n      return response;\n    } catch (error) {\n      console.error('Error sending password to server:', error);\n      return {\n        status: 500\n      };\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Create Your Password\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Password:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        value: password,\n        onChange: e => setPassword(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Confirm Password:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        value: confirmPassword,\n        onChange: e => setConfirmPassword(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          color: 'red'\n        },\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 19\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Create Password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n_s(CreatePassword, \"CrdUOOEGIuuzlUuxQ6LZxCRDiHg=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = CreatePassword;\nexport default CreatePassword;\nvar _c;\n$RefreshReg$(_c, \"CreatePassword\");","map":{"version":3,"names":["React","useState","useParams","useNavigate","ToastContainer","toast","jsxDEV","_jsxDEV","CreatePassword","_s","email","password","setPassword","confirmPassword","setConfirmPassword","error","setError","navigate","handleSubmit","e","preventDefault","response","sendPasswordToServer","status","success","setTimeout","fetch","method","headers","body","JSON","stringify","console","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","value","onChange","target","required","style","color","_c","$RefreshReg$"],"sources":["C:/Users/shims/Desktop/EMS/frontend/src/pages/Auth/CreatePassword.jsx"],"sourcesContent":["// CreatePassword.jsx\r\nimport React, { useState } from 'react';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\n\r\nconst CreatePassword = () => {\r\n  const { email } = useParams();\r\n  const [password, setPassword] = useState('');\r\n  const [confirmPassword, setConfirmPassword] = useState('');\r\n  const [error, setError] = useState('');\r\n  const navigate = useNavigate();\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    // Validate passwords\r\n    if (password !== confirmPassword) {\r\n      setError('Passwords do not match.');\r\n      return;\r\n    }\r\n\r\n    // Add logic to send the new password to the server for confirmation\r\n    const response = await sendPasswordToServer(email, password);\r\n\r\n    if (response.status === 200) {\r\n      // Password created successfully, redirect to login page\r\n      toast.success('Password created successfully ! Redirecting to login...');\r\n      setTimeout(() => {\r\n        navigate('/auth/login');\r\n      }, 2000);\r\n    } else {\r\n      setError('Error creating password. Please try again.');\r\n    }\r\n  };\r\n\r\n  const sendPasswordToServer = async (email, password) => {\r\n    try {\r\n      const response = await fetch(`http://localhost:5000/api/create-password/${email}`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ password }),\r\n      });\r\n\r\n      return response;\r\n    } catch (error) {\r\n      console.error('Error sending password to server:', error);\r\n      return { status: 500 };\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Create Your Password</h2>\r\n      <form onSubmit={handleSubmit}>\r\n        <label>Password:</label>\r\n        <input type=\"password\" value={password} onChange={(e) => setPassword(e.target.value)} required />\r\n        <br />\r\n\r\n        <label>Confirm Password:</label>\r\n        <input type=\"password\" value={confirmPassword} onChange={(e) => setConfirmPassword(e.target.value)} required />\r\n        <br />\r\n\r\n        {error && <p style={{ color: 'red' }}>{error}</p>}\r\n\r\n        <button type=\"submit\">Create Password</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CreatePassword;\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}