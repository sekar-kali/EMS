{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shims\\\\Desktop\\\\EMS\\\\frontend\\\\src\\\\pages\\\\Auth\\\\CreatePassword.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CreatePasswordPage = () => {\n  _s();\n  const {\n    email\n  } = useParams();\n  const [password, setPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [error, setError] = useState('');\n  const isPasswordValid = password => {\n    const passwordRegex = /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&*()_+])(?=.*[a-zA-Z]).{8,}$/;\n    return passwordRegex.test(password);\n  };\n\n  // Usage in handleSubmit\n  if (!isPasswordValid(password)) {\n    setError('Invalid password format. It must have at least 8 characters, including 1 uppercase letter, 1 lowercase letter, 1 digit, and 1 special character.');\n    return;\n  }\n  const handlePasswordChange = e => {\n    setPassword(e.target.value);\n  };\n  const handleConfirmPasswordChange = e => {\n    setConfirmPassword(e.target.value);\n  };\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    // Add your password validation and creation logic here\n\n    if (password !== confirmPassword) {\n      setError('Passwords do not match.');\n      return;\n    }\n\n    // Add logic to send the new password to the server for confirmation\n    // You might want to use an API call to send the data to your server\n\n    // Example API call using fetch\n    fetch('http://localhost:5000/api/reset-password', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        email,\n        password\n      })\n    }).then(response => {\n      if (response.ok) {\n        // Password reset successfully, you can redirect the user or show a success message\n      } else {\n        // Handle error, show error message, etc.\n      }\n    }).catch(error => {\n      console.error('Error resetting password:', error);\n      // Handle error, show error message, etc.\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Create Password Page\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Email: \", email]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Password:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          value: password,\n          onChange: handlePasswordChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Confirm Password:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          value: confirmPassword,\n          onChange: handleConfirmPasswordChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          color: 'red'\n        },\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 19\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Reset Password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n};\n_s(CreatePasswordPage, \"g1CRGImP/BqqQPi9KnlEG9sxr0A=\", false, function () {\n  return [useParams];\n});\n_c = CreatePasswordPage;\nexport default CreatePasswordPage;\nvar _c;\n$RefreshReg$(_c, \"CreatePasswordPage\");","map":{"version":3,"names":["React","useState","useParams","jsxDEV","_jsxDEV","CreatePasswordPage","_s","email","password","setPassword","confirmPassword","setConfirmPassword","error","setError","isPasswordValid","passwordRegex","test","handlePasswordChange","e","target","value","handleConfirmPasswordChange","handleSubmit","preventDefault","fetch","method","headers","body","JSON","stringify","then","response","ok","catch","console","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","onChange","style","color","_c","$RefreshReg$"],"sources":["C:/Users/shims/Desktop/EMS/frontend/src/pages/Auth/CreatePassword.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\n\r\nconst CreatePasswordPage = () => {\r\n  const { email } = useParams();\r\n  const [password, setPassword] = useState('');\r\n  const [confirmPassword, setConfirmPassword] = useState('');\r\n  const [error, setError] = useState('');\r\n  const isPasswordValid = (password) => {\r\n    const passwordRegex = /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&*()_+])(?=.*[a-zA-Z]).{8,}$/;\r\n    return passwordRegex.test(password);\r\n  };\r\n  \r\n  // Usage in handleSubmit\r\n  if (!isPasswordValid(password)) {\r\n    setError('Invalid password format. It must have at least 8 characters, including 1 uppercase letter, 1 lowercase letter, 1 digit, and 1 special character.');\r\n    return;\r\n  }\r\n  const handlePasswordChange = (e) => {\r\n    setPassword(e.target.value);\r\n  };\r\n\r\n  const handleConfirmPasswordChange = (e) => {\r\n    setConfirmPassword(e.target.value);\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    // Add your password validation and creation logic here\r\n\r\n    if (password !== confirmPassword) {\r\n      setError('Passwords do not match.');\r\n      return;\r\n    }\r\n\r\n    // Add logic to send the new password to the server for confirmation\r\n    // You might want to use an API call to send the data to your server\r\n\r\n    // Example API call using fetch\r\n    fetch('http://localhost:5000/api/reset-password', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        email,\r\n        password,\r\n      }),\r\n    })\r\n      .then((response) => {\r\n        if (response.ok) {\r\n          // Password reset successfully, you can redirect the user or show a success message\r\n        } else {\r\n          // Handle error, show error message, etc.\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error resetting password:', error);\r\n        // Handle error, show error message, etc.\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Create Password Page</h1>\r\n      <p>Email: {email}</p>\r\n      <form onSubmit={handleSubmit}>\r\n        <label>\r\n          Password:\r\n          <input type=\"password\" value={password} onChange={handlePasswordChange} />\r\n        </label>\r\n        <br />\r\n        <label>\r\n          Confirm Password:\r\n          <input type=\"password\" value={confirmPassword} onChange={handleConfirmPasswordChange} />\r\n        </label>\r\n        <br />\r\n        {error && <p style={{ color: 'red' }}>{error}</p>}\r\n        <button type=\"submit\">Reset Password</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CreatePasswordPage;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}