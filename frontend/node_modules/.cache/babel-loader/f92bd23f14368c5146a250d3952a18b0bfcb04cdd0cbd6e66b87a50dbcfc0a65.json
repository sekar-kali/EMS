{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shims\\\\Desktop\\\\EMS\\\\frontend\\\\src\\\\pages\\\\Auth\\\\CreatePassword.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { ToastContainer, toast } from 'react-toastify';\nimport logoImage from '../../logo.png';\nimport 'react-toastify/dist/ReactToastify.css';\nimport '../../auth.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst CreatePassword = () => {\n  _s();\n  const {\n    email\n  } = useParams();\n  const [password, setPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [error, setError] = useState('');\n  const [loading, setLoading] = useState(false);\n  const navigate = useNavigate();\n  const handleSubmit = async e => {\n    e.preventDefault();\n\n    // Validate passwords\n    if (password !== confirmPassword) {\n      setError('Passwords do not match.');\n      return;\n    }\n\n    // Reset previous error messages\n    setError('');\n    setLoading(true);\n    try {\n      const response = await sendPasswordToServer(email, password);\n      if (response.status === 200) {\n        // Password created successfully, redirect to login page\n        toast.success('Password created successfully! Redirecting to login...');\n        setTimeout(() => {\n          navigate('/auth/login');\n        }, 2000);\n      } else {\n        // Handle specific error cases if needed\n        setError('Error creating password. Please try again.');\n      }\n    } catch (error) {\n      console.error('Error sending password to server:', error);\n      setError('An unexpected error occurred. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const sendPasswordToServer = async (email, password) => {\n    try {\n      const response = await fetch(`http://localhost:5000/api/create-password/${email}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          password\n        })\n      });\n      return response;\n    } catch (error) {\n      console.error('Error sending password to server:', error);\n      return {\n        status: 500\n      };\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"login-container1\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"logo\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: logoImage,\n          alt: \"logo-EMS\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"EMS\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"login-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Create Your Password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Password:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          value: password,\n          onChange: e => setPassword(e.target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Confirm Password:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          value: confirmPassword,\n          onChange: e => setConfirmPassword(e.target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 11\n        }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            color: 'red'\n          },\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          disabled: loading,\n          children: loading ? 'Creating Password...' : 'Create Password'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(CreatePassword, \"70r/O8MiqXi72JkYHwqfvlbSgvE=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = CreatePassword;\nexport default CreatePassword;\nvar _c;\n$RefreshReg$(_c, \"CreatePassword\");","map":{"version":3,"names":["React","useState","useParams","useNavigate","ToastContainer","toast","logoImage","jsxDEV","_jsxDEV","Fragment","_Fragment","CreatePassword","_s","email","password","setPassword","confirmPassword","setConfirmPassword","error","setError","loading","setLoading","navigate","handleSubmit","e","preventDefault","response","sendPasswordToServer","status","success","setTimeout","console","fetch","method","headers","body","JSON","stringify","children","className","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","value","onChange","target","required","style","color","disabled","_c","$RefreshReg$"],"sources":["C:/Users/shims/Desktop/EMS/frontend/src/pages/Auth/CreatePassword.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport logoImage from '../../logo.png';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport '../../auth.css';\r\n\r\nconst CreatePassword = () => {\r\n  const { email } = useParams();\r\n  const [password, setPassword] = useState('');\r\n  const [confirmPassword, setConfirmPassword] = useState('');\r\n  const [error, setError] = useState('');\r\n  const [loading, setLoading] = useState(false);\r\n  const navigate = useNavigate();\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    // Validate passwords\r\n    if (password !== confirmPassword) {\r\n      setError('Passwords do not match.');\r\n      return;\r\n    }\r\n\r\n    // Reset previous error messages\r\n    setError('');\r\n    setLoading(true);\r\n\r\n    try {\r\n      const response = await sendPasswordToServer(email, password);\r\n\r\n      if (response.status === 200) {\r\n        // Password created successfully, redirect to login page\r\n        toast.success('Password created successfully! Redirecting to login...');\r\n        setTimeout(() => {\r\n          navigate('/auth/login');\r\n        }, 2000);\r\n      } else {\r\n        // Handle specific error cases if needed\r\n        setError('Error creating password. Please try again.');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error sending password to server:', error);\r\n      setError('An unexpected error occurred. Please try again.');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const sendPasswordToServer = async (email, password) => {\r\n    try {\r\n      const response = await fetch(`http://localhost:5000/api/create-password/${email}`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ password }),\r\n      });\r\n\r\n      return response;\r\n    } catch (error) {\r\n      console.error('Error sending password to server:', error);\r\n      return { status: 500 };\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"login-container1\">\r\n        <div className=\"logo\">\r\n          <img src={logoImage} alt=\"logo-EMS\" />\r\n          <p>EMS</p>\r\n        </div>\r\n      </div>\r\n      <div className=\"login-container\">\r\n        <h2>Create Your Password</h2>\r\n        <form onSubmit={handleSubmit}>\r\n          <label>Password:</label>\r\n          <input type=\"password\" value={password} onChange={(e) => setPassword(e.target.value)} required />\r\n          <br />\r\n\r\n          <label>Confirm Password:</label>\r\n          <input type=\"password\" value={confirmPassword} onChange={(e) => setConfirmPassword(e.target.value)} required />\r\n          <br />\r\n\r\n          {error && <p style={{ color: 'red' }}>{error}</p>}\r\n\r\n          <button type=\"submit\" disabled={loading}>\r\n            {loading ? 'Creating Password...' : 'Create Password'}\r\n          </button>\r\n        </form>\r\n      </div>\r\n      <ToastContainer />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CreatePassword;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}